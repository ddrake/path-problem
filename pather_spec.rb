require 'rspec'
require './pather.rb'

describe Pather do
  describe "with the provided sample input" do
    it "should match the expected output" do
      @input = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ........................
        ....#...................
        ........................
        ........................
        ........................
        ........................
        ..................#.....
        ........................
        ........................
        ........................
        ........................
      EOS
      @expected = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ........................
        ....#...................
        ....*...................
        ....*...................
        ....*...................
        ....*...................
        ....**************#.....
        ........................
        ........................
        ........................
        ........................
      EOS
      expect(Pather.new(@input.lines).draw).to eq @expected
    end
  end
  describe "with the hash character positions reversed" do
    it "should match the expected output" do
      @input = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ........................
        ..................#.....
        ........................
        ........................
        ........................
        ........................
        ....#...................
        ........................
      EOS
      @expected = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ........................
        ..................#.....
        ..................*.....
        ..................*.....
        ..................*.....
        ..................*.....
        ....#**************.....
        ........................
      EOS
      expect(Pather.new(@input.lines).draw).to eq @expected
    end
  end
  describe "with only one line difference" do
    it "should match the expected output" do
      @input = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ........................
        ....#...................
        ..................#.....
        ........................
      EOS
      @expected = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ........................
        ....#...................
        ....**************#.....
        ........................
      EOS
      expect(Pather.new(@input.lines).draw).to eq @expected
    end
  end
  describe "with only one line difference reversed" do
    it "should match the expected output" do
      @input = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ........................
        ..................#.....
        ....#...................
        ........................
      EOS
      @expected = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ........................
        ..................#.....
        ....#**************.....
        ........................
      EOS
      expect(Pather.new(@input.lines).draw).to eq @expected
    end
  end
  describe "with hashes in the same line" do
    it "should match the expected output" do
      @input = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ........................
        ....#.............#.....
        ........................
      EOS
      @expected = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ........................
        ....#*************#.....
        ........................
      EOS
      expect(Pather.new(@input.lines).draw).to eq @expected
    end
  end
  describe "with hashes in the same column" do
    it "should match the expected output" do
      @input = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ....#...................
        ........................
        ....#...................
        ........................
      EOS
      @expected = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ....#...................
        ....*...................
        ....#...................
        ........................
      EOS
      expect(Pather.new(@input.lines).draw).to eq @expected
    end
  end
  describe "with adjacent hashes in the same line" do
    it "should match the expected output" do
      @input = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ........................
        ....##..................
        ........................
      EOS
      @expected = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ........................
        ....##..................
        ........................
      EOS
      expect(Pather.new(@input.lines).draw).to eq @expected
    end
  end
  describe "with adjacent hashes in the same column" do
    it "should match the expected output" do
      @input = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ....#...................
        ....#...................
        ........................
      EOS
      @expected = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ....#...................
        ....#...................
        ........................
      EOS
      expect(Pather.new(@input.lines).draw).to eq @expected
    end
  end
  describe "with no hash characters" do
    it "should raise an error" do
      @input = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ........................
      EOS
      expect{ Pather.new(@input.lines).draw }.
        to raise_error "Incorrect number of hash symbols.  Expected exactly two."
    end
  end
  describe "with only one hash character" do
    it "should raise an error" do
      @input = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ....#...................
        ........................
      EOS
      expect{ Pather.new(@input.lines).draw }.
        to raise_error "Incorrect number of hash symbols.  Expected exactly two."
    end
  end
  describe "with more than two hash characters (on three lines)" do
    it "should raise an error" do
      @input = <<-EOS.gsub(/^ {8}/, '')
        ..............#.........
        ....#...................
        ..................#.....
      EOS
      expect{ Pather.new(@input.lines).draw }.
        to raise_error "Incorrect number of hash symbols.  Expected exactly two."
    end
  end
  describe "with more than two hash characters (on two lines)" do
    it "should raise an error" do
      @input = <<-EOS.gsub(/^ {8}/, '')
        ..............#.........
        ....#............#......
        ........................
      EOS
      expect{ Pather.new(@input.lines).draw }.
        to raise_error "Incorrect number of hash symbols.  Expected exactly two."
    end
  end
  describe "with more than two hash characters (on one line)" do
    it "should raise an error" do
      @input = <<-EOS.gsub(/^ {8}/, '')
        ........................
        ....#.....#......#......
        ........................
      EOS
      expect{ Pather.new(@input.lines).draw }.
        to raise_error "Incorrect number of hash symbols.  Expected exactly two."
    end
  end
end
